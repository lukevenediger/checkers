// Code generated by mockery v2.46.3. DO NOT EDIT.

package keeper_test

import (
	context "context"

	store "cosmossdk.io/core/store"
	mock "github.com/stretchr/testify/mock"
)

// KVStoreService is an autogenerated mock type for the KVStoreService type
type KVStoreService struct {
	mock.Mock
}

type KVStoreService_Expecter struct {
	mock *mock.Mock
}

func (_m *KVStoreService) EXPECT() *KVStoreService_Expecter {
	return &KVStoreService_Expecter{mock: &_m.Mock}
}

// OpenKVStore provides a mock function with given fields: _a0
func (_m *KVStoreService) OpenKVStore(_a0 context.Context) store.KVStore {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OpenKVStore")
	}

	var r0 store.KVStore
	if rf, ok := ret.Get(0).(func(context.Context) store.KVStore); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.KVStore)
		}
	}

	return r0
}

// KVStoreService_OpenKVStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenKVStore'
type KVStoreService_OpenKVStore_Call struct {
	*mock.Call
}

// OpenKVStore is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *KVStoreService_Expecter) OpenKVStore(_a0 interface{}) *KVStoreService_OpenKVStore_Call {
	return &KVStoreService_OpenKVStore_Call{Call: _e.mock.On("OpenKVStore", _a0)}
}

func (_c *KVStoreService_OpenKVStore_Call) Run(run func(_a0 context.Context)) *KVStoreService_OpenKVStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *KVStoreService_OpenKVStore_Call) Return(_a0 store.KVStore) *KVStoreService_OpenKVStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KVStoreService_OpenKVStore_Call) RunAndReturn(run func(context.Context) store.KVStore) *KVStoreService_OpenKVStore_Call {
	_c.Call.Return(run)
	return _c
}

// NewKVStoreService creates a new instance of KVStoreService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKVStoreService(t interface {
	mock.TestingT
	Cleanup(func())
}) *KVStoreService {
	mock := &KVStoreService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
