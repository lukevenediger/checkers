// Code generated by mockery v2.46.3. DO NOT EDIT.

package keeper_test

import mock "github.com/stretchr/testify/mock"

// Codec is an autogenerated mock type for the Codec type
type Codec struct {
	mock.Mock
}

type Codec_Expecter struct {
	mock *mock.Mock
}

func (_m *Codec) EXPECT() *Codec_Expecter {
	return &Codec_Expecter{mock: &_m.Mock}
}

// BytesToString provides a mock function with given fields: bz
func (_m *Codec) BytesToString(bz []byte) (string, error) {
	ret := _m.Called(bz)

	if len(ret) == 0 {
		panic("no return value specified for BytesToString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (string, error)); ok {
		return rf(bz)
	}
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(bz)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(bz)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Codec_BytesToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BytesToString'
type Codec_BytesToString_Call struct {
	*mock.Call
}

// BytesToString is a helper method to define mock.On call
//   - bz []byte
func (_e *Codec_Expecter) BytesToString(bz interface{}) *Codec_BytesToString_Call {
	return &Codec_BytesToString_Call{Call: _e.mock.On("BytesToString", bz)}
}

func (_c *Codec_BytesToString_Call) Run(run func(bz []byte)) *Codec_BytesToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Codec_BytesToString_Call) Return(_a0 string, _a1 error) *Codec_BytesToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Codec_BytesToString_Call) RunAndReturn(run func([]byte) (string, error)) *Codec_BytesToString_Call {
	_c.Call.Return(run)
	return _c
}

// StringToBytes provides a mock function with given fields: text
func (_m *Codec) StringToBytes(text string) ([]byte, error) {
	ret := _m.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for StringToBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(text)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Codec_StringToBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StringToBytes'
type Codec_StringToBytes_Call struct {
	*mock.Call
}

// StringToBytes is a helper method to define mock.On call
//   - text string
func (_e *Codec_Expecter) StringToBytes(text interface{}) *Codec_StringToBytes_Call {
	return &Codec_StringToBytes_Call{Call: _e.mock.On("StringToBytes", text)}
}

func (_c *Codec_StringToBytes_Call) Run(run func(text string)) *Codec_StringToBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Codec_StringToBytes_Call) Return(_a0 []byte, _a1 error) *Codec_StringToBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Codec_StringToBytes_Call) RunAndReturn(run func(string) ([]byte, error)) *Codec_StringToBytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewCodec creates a new instance of Codec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *Codec {
	mock := &Codec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
