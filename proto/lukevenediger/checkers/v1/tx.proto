syntax = "proto3";
package lukevenediger.checkers.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "lukevenediger/checkers/v1/types.proto";

option go_package = "github.com/lukevenediger/checkers";

// CheckersTorram defines Checkers message service
service CheckersTorram {
  option (cosmos.msg.v1.service) = true;

  // CheckersCreateGm creates a new game
  rpc CheckersCreateGm(ReqCheckersTorram) returns (ResCheckersTorram);
  // ForfeitGm forfeits an incomplete game
  rpc ForfeitGm(ReqForfeitGm) returns (ResForfeitGm);
}

// ReqCheckersTorram defines the CheckersTorram/CreateGm request type
message ReqCheckersTorram {
  option (cosmos.msg.v1.signer) = "creator";

  // Creator is the address of the sender
  string creator = 1;
  // Index is the unique game state identifier
  string index = 2;
  // Black is the address of the black player
  string black = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // Red is the address of the red player
  string red = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// ResCheckersTorram defines the CheckersTorram/CreateGm response type
message ResCheckersTorram {}

// ReqForfeitGm defines the CheckersTorram/ForfeitGm request type
message ReqForfeitGm {
  option (cosmos.msg.v1.signer) = "forfeiter";

  // Forfeiter is the address of the sender
  string forfeiter = 1;
  // Index is the unique game state identifier
  string index = 2;
}

// ResForfeitGm defines the CheckersTorram/ForfeitGm response type
message ResForfeitGm {}
